<!-- Jinja2 template based on https://github.com/linkml/linkml/blob/main/linkml/generators/docgen/slot.md.jinja2 -->
<!-- This file should be periodically checked against the original source -->
<!-- Last check 25 August 2023 -->

# Property: {{ gen.name(element) }}

{%- if header -%}
{{header}}
{%- endif -%}

{% if element.description %}
{% set element_description_lines = element.description.split('\n') %}
{% for element_description_line in element_description_lines %}
{{ element_description_line }}
{% endfor %}
{% endif %}

## Obligation and Cardinality

The obligation or cardinality can be overridden when used by classes. Check the [Applicable Classes](#applicable-classes) section below for details.

| URL                         | Range                       | Obligation  | Cardinality |
|-----------------------------|-----------------------------|-------------|-------------|
| {{ gen.uri_link(element) }} | {{gen.link(element.range)}} {% if element.minimum_value is not none %}<br/>Minimum Value: {{ element.minimum_value|int }}{% endif %}{% if element.maximum_value is not none %}<br/>Maximum Value: {{ element.maximum_value|int }}{% endif %}{% if element.pattern %}<br/>Regex pattern: {{ '`' }}{{  element.pattern }}{{ '`' }}{% endif %} | {% if element.required %}Mandatory{% elif element.recommended %}Recommended{% else %}Optional{% endif %} | {% if element.multivalued %}Many{% else %}One{% endif %} |

{% if schemaview.is_mixin(element.name) %}
Mixin: {{ element.mixin }}
{% endif -%}

{% if element.comments %}
## Usage Notes

{% set comments = element.comments | join('') %}

{% set comments_lines = comments.split('\n') %}
{% for line in comments_lines %}
{% if line.startswith('purpose:') %}
### Purpose
{% elif line.startswith('distinctFrom:') %}
### Do not confuse with
{% elif line.startswith('guidance:') %}
### Guidelines
{% else %}
{{ line }}
{% endif %}
{% endfor %}
{% endif %}

{% if schemaview.slot_parents(element.name) or schemaview.slot_children(element.name, mixins=False) %}

## Inheritance

{{ gen.inheritance_tree(element, mixins=True) }}
{% else %}
<!-- no inheritance hierarchy -->
{% endif %}

{% if schemaview.get_classes_by_slot(element, include_induced=True) %}

## Applicable Classes

| Name | Description | Modifies Property |
| --- | --- | --- |
{% for c in schemaview.get_classes_by_slot(element, include_induced=True) -%}
{{ gen.link(c) }} | {{ schemaview.get_class(c).description|enshorten }} | {% if c in schemaview.get_classes_modifying_slot(element) %} yes {% else %} no {% endif %} |
{% endfor %}

{% endif %}


{% if schemaview.is_mixin(element.name) %}
## Mixin Usage

| mixed into | description | range | domain |
| --- | --- | --- | --- |
{% for s in schemaview.slot_children(element.name, is_a=False) -%}
| {{ gen.link(s) }} | {{ schemaview.get_slot(s).description|enshorten }} | {{ schemaview.get_slot(s).range }} | {{ schemaview.get_classes_by_slot(schemaview.get_slot(s))|join(', ') }} |
{% endfor %}
{% endif %}

{% if schemaview.usage_index().get(element.name) %}
## Usages

| used by | used in | type | used |
| ---  | --- | --- | --- |
{% for usage in schemaview.usage_index().get(element.name) -%}
| {{gen.link(usage.used_by)}} | {{gen.link(usage.slot)}} | {{usage.metaslot}} | {{ gen.link(usage.used) }} |
{% endfor %}
{% endif %}

{% include "common_metadata.md.jinja2" %}

{% include "feedback_footer.md.jinja2" %}

{%- if footer -%}
{{footer}}
{%- endif -%}
